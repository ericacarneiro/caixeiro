# Auto detect text files and perform LF normalization
* text=auto

import java.util.Stack;


public class Verifica {

    private Stack<Integer> stack;
    private int matrizCusto[][];

    public Verifica()
    {
        stack = new Stack<Integer>();
    }

    public boolean verifica(int matriz[][], int partida)
    {
        boolean ciclo = false;
        int num_nos = matriz[partida].length - 1;

        matrizCusto = new int [num_nos + 1][num_nos + 1];
        for (int v_partida = 1; v_partida <= num_nos; v_partida++)
        {
            for (int v_chegada = 1; v_chegada <= num_nos; v_chegada++)
            {
                matrizCusto[v_partida][v_chegada] = matriz[v_partida][v_chegada];

            }
        }

        int visited[] = new int[num_nos+ 1];
        int element = partida;
        int i = partida;
        visited[partida] = 1;
        stack.push(partida);

        while (!stack.isEmpty())
        {
            element = stack.peek();
            i = element;
            while (i <= num_nos)
            {
                if (matrizCusto[element][i] >= 1 && visited[i] == 1)
                {
                    if (stack.contains(i))
                    {
                        ciclo = true;
                        return ciclo;
                    }
                }
                if (matrizCusto[element][i] >= 1 && visited[i] == 0)
                {
                    stack.push(i);
                    visited[i] = 1;
                    matrizCusto[element][i] = 0;
                    matrizCusto[i][element] = 0;
                    element = i;
                    i = 1;
                    continue;
                }
                i++;
            }
            stack.pop();
        }
        return ciclo;
    }

}

public class Vertice {

    
}

public class Aresta {

    int v_partida;
    int v_chegada;
    int peso;

}


import java.util.Comparator;



public class ArestaComparator implements Comparator<Aresta>{

    @Override
    public int compare(Aresta a1, Aresta a2)
    {
        if (a1.peso < a2.peso)
            return -1;
        if (a1.peso > a2.peso)
            return 1;
        return 0;
    }


}

import java.util.*;
import java.io.*;

public class DFS {



    public dfs (int s) {
    Vector<Boolean> visited = new Vector<Boolean>(V);

    for (int i = 0; i < V; i++)
            visited.add(false);

    Stack<Integer> stack = new Stack<>();

    // Push the current source node
            stack.push(s);

            while(stack.empty() == false)
    {
        // Pop a vertex from stack and print it
        s = stack.peek();
        stack.pop();

        // Stack may contain same vertex twice. So
        // we need to print the popped item only
        // if it is not visited.
        if(visited.get(s) == false)
        {
            System.out.print(s + " ");
            visited.set(s, true);
        }

        // Get all adjacent vertices of the popped vertex s
        // If a adjacent has not been visited, then puah it
        // to the stack.
        Iterator<Integer> itr = adj[s].iterator();

        while (itr.hasNext())
        {
            int v = itr.next();
            if(!visited.get(v))
                stack.push(v);
        }

    }
}
}

import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

public class Kruskal {

    private List<Aresta> arestasList;
    private int num_vertices;
    public static final int MAX_VALUE = 999;
    private int visited[];
    private int spanning_tree[][];

    public Kruskal(int num_vertices) {
        this.num_vertices = num_vertices;
        this.arestasList = new LinkedList<Aresta>();
        visited = new int[this.num_vertices + 1];
        spanning_tree = new int[num_vertices + 1][num_vertices + 1];
    }

    public void kruskal(int matrizCusto[][]) {
        boolean finished = false;
        for (int partida = 1; partida <= num_vertices; partida++) {
            for (int chegada = 1; chegada <= num_vertices; chegada++) {
                if (matrizCusto[partida][chegada] != MAX_VALUE && partida != chegada) {
                    Aresta aresta = new Aresta();
                    aresta.v_partida = partida;
                    aresta.v_chegada = chegada;
                    aresta.peso = matrizCusto[chegada][partida];
                    matrizCusto[chegada][partida] = MAX_VALUE;
                    arestasList.add(aresta);
                }
            }
        }


        Collections.sort(arestasList, new ArestaComparator());
        Verifica verifica = new Verifica();
        for (Aresta aresta : arestasList) {

            spanning_tree[aresta.v_partida][aresta.v_chegada] = aresta.peso;
            spanning_tree[aresta.v_chegada][aresta.v_partida] = aresta.peso;
            if (verifica.verifica(spanning_tree, aresta.v_partida)) {
                spanning_tree[aresta.v_partida][aresta.v_chegada] = 0;
                spanning_tree[aresta.v_chegada][aresta.v_partida] = 0;
                aresta.peso = -1;
                continue;
            }
            visited[aresta.v_partida] = 1;
            visited[aresta.v_chegada] = 1;
        }

        for (int i = 0; i < visited.length; i++) {
            if (visited[i] == 0) {
                finished = false;
                break;
            } else {
                finished = true;
            }

            if (finished) break;

            System.out.println("The spanning tree is ");
            for (int j = 1; j <= num_vertices; j++)
                System.out.print("\t" + j);
            System.out.println();
            for (int partida = 1; partida <= num_vertices; partida++) {
                System.out.print(partida+ "\t");
                for (int chegada = 1; chegada <= num_vertices; chegada++) {
                    System.out.print(spanning_tree[partida][chegada] + "\t");
                }
                System.out.println();
            }

        }
    }

    public static void main(String... arg)
    {
        int adjacency_matrix[][];
        int number_of_vertices;

        Scanner scan = new Scanner(System.in);
        System.out.println("Enter the number of vertices");
        number_of_vertices = scan.nextInt();
        adjacency_matrix = new int[number_of_vertices + 1][number_of_vertices + 1];

        System.out.println("Enter the Weighted Matrix for the graph");
        for (int i = 1; i <= number_of_vertices; i++)
        {
            for (int j = 1; j <= number_of_vertices; j++)
            {
                adjacency_matrix[i][j] = scan.nextInt();
                if (i == j)
                {
                    adjacency_matrix[i][j] = 0;
                    continue;
                }
                if (adjacency_matrix[i][j] == 0)
                {
                    adjacency_matrix[i][j] = MAX_VALUE;
                }
            }
        }
        Kruskal kruskalAlgorithm = new Kruskal(number_of_vertices);
        kruskalAlgorithm.kruskal(adjacency_matrix);
        scan.close();
    }
}
